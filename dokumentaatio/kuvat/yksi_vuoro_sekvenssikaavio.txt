User Input->User Input: Waiting input
activate GameState
GameState->GameState: play_view.update()
User Input->GameState: Click '+' (Increase bet)
GameState->GameManager: increase_bet()
activate GameManager
GameManager-->GameManager: current_bet = 2
GameManager-->GameState:
deactivate GameManager
GameState-->User Input:
User Input->User Input: Waiting input
User Input->GameState: Click Deal
GameState->GameManager: deal()
activate GameManager
GameManager->Player: remove_credits(current_bet)
deactivate GameManager
activate Player
Player-->Player: credits = 8
Player-->GameManager:
deactivate Player
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
GameManager-->GameState:
GameState-->User Input:
User Input->User Input: Waiting input
User Input->GameState: Click Hold on card 1
GameState->GameManager: hold_card(1)
activate GameManager
GameManager-->GameState:
deactivate GameManager
GameState-->User Input:
User Input->User Input: Waiting input
User Input->GameState: Click Hold on card 2
GameState->GameManager: hold_card(2)
activate GameManager
GameManager-->GameState:
deactivate GameManager
GameState-->User Input:
User Input->User Input: Waiting input
User Input->GameState: Click Deal
GameState->GameManager: deal()
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->Deck: draw_one_card()
deactivate GameManager
activate Deck
Deck-->GameManager: card
deactivate Deck
activate GameManager
GameManager->GameManager: check_player_hand()
GameManager-->GameManager: player_win = True
GameManager->GameManager: check_win_amount(combinations)
GameManager-->GameManager: combinations['one_pair'] is True
GameManager->GameManager: set_win_amount(0)
GameManager-->GameManager: self.current_win = 2
deactivate GameManager
GameManager-->GameState:
GameState-->GameState: player_win is True
GameState->GameState: win_view.update()
GameState-->User Input:
User Input->User Input: Waiting input
User Input->GameState: Click Claim winnings
GameState->GameManager: claim_win()
activate GameManager
GameManager->Player: add_credits(self.current_win)
deactivate GameManager
activate Player
Player-->Player: credits = 10
Player-->GameManager:
deactivate Player
activate GameManager
GameManager->GameManager: reset_game(False)
GameManager-->GameManager: current_win = 0
GameManager-->GameManager: deal_active = False
GameManager-->GameManager: game_active == False
GameManager-->GameManager: double_active = False
GameManager-->GameManager: game_over = False
GameManager-->GameManager: bad_guess = False
GameManager-->GameManager: player_win = False
GameManager-->GameManager: player_hand = [None, None, None, None, None]
GameManager-->GameManager: card_on_hold = [False, False, False, False, False]
deactivate GameManager
GameManager-->GameState:
GameState-->GameState: player_win is False
GameState->GameState: play_view.update()
GameState-->User Input:
User Input->User Input: Waiting input
