User Input->User Input: Waiting input
GameState->GameState: mainmenu_view.update()
activate GameState
User Input->GameState: click 'New Game'
GameState->GameState: new_game()
GameState->GameManager: new_game()
activate GameManager
GameManager->GameManager: reset_game()
GameManager-->GameManager: current_bet = 1
GameManager-->GameManager: current_win = 0
GameManager-->GameManager: deal_active = False
GameManager-->GameManager: game_active == False
GameManager-->GameManager: double_active = False
GameManager-->GameManager: game_over = False
GameManager-->GameManager: bad_guess = False
GameManager-->GameManager: player_win = False
GameManager-->GameManager: card_on_hold = [False, False, False, False, False]
deactivate GameManager
GameManager->*Player: player = Player()
activate Player
deactivate Player
Player-->Player: credits = 10
activate Player
deactivate Player
Player-->Player: best_double_streak = 0
activate Player
deactivate Player
Player-->Player: best_double_win = 0
activate Player
deactivate Player
Player-->Player: best_credits = 10
activate Player
deactivate Player
Player-->Player: current_double_streak = 0
activate Player
deactivate Player
Player->PlayerRepository: player_repository = PlayerRepository()
activate PlayerRepository
PlayerRepository->PlayerRepository: load_highscores()
deactivate PlayerRepository
PlayerRepository--> Player:
Player-->GameManager: player
GameManager-->GameState:
GameState-->GameState: state is 'play'
GameState->GameState: play_view.update()
GameState-->User Input:
User Input->User Input: Waiting input